/*
 * httpserver.cpp
 *
 *  Created on: Mar 19, 2019
 *      Author: akki
 */

#include "httpserver.h"
#include <sys/socket.h>
#include <netinet/in.h>
#include <string.h>

#define NUMBER_OF_CLIENTS	5
#define BUFFERSIZE	1024

httpserver::httpserver()
{
	// TODO Auto-generated constructor stub

}

httpserver::~httpserver()
{
	// TODO Auto-generated destructor stub
}

void httpserver::handleClient(int* client_fd)
{
	if(client_fd == NULL)
	{
		return ;
	}

	char buffer[BUFFERSIZE] = {0};
	int readBytes = read(fd,buffer,BUFFERSIZE);
	std::string httpVer, httpMethod;

	if(readBytes > 0)
	{
		buffer[readBytes] = '\0';
		std::string buffer_str(buffer);
		std::cout << "client sent "<<buffer_str <<std::endl;


	}
	std::string
	int tokenPos = std:find()
	std::sting httpversion = std::substr()
}

int httpserver::startServer(int port)
{
	int server_fd, cli_socket, valread;
	struct sockaddr_in address;
	int addrlen = sizeof(address);
	char buffer[1024] = {0};

	// Creating socket file descriptor
	if ((server_fd = socket(AF_INET, SOCK_STREAM, 0)) == 0)
	{
		perror("socket failed");
		exit(EXIT_FAILURE);
	}

	address.sin_family = AF_INET;
	address.sin_addr.s_addr = INADDR_ANY;
	address.sin_port = htons( port );

	if (bind(server_fd, (struct sockaddr *)&address,
								 sizeof(address))<0)
	{
		perror("bind failed");
		exit(EXIT_FAILURE);
	}

	while(1)
	{
		if (listen(server_fd, NUMBER_OF_CLIENTS) < 0)
		{
			perror("listen");
			exit(EXIT_FAILURE);
		}

		if ((cli_socket = accept(server_fd, (struct sockaddr *)&address,
						   (socklen_t*)&addrlen))<0)
		{
			perror("accept");
			exit(EXIT_FAILURE);
		}
		handleClient(&cli_socket);

	}

	return 0;
}

void httpserver::addHandle(HTTP_METHOD method,(void*)(*handle)(void*))
{
	switch (method)
	{
	case eGET:
		mGetHandle = handle;
		break;
	case ePut:
		break;
	case ePost:
		break;
	case default:
		std::cout << "unsupported HTTP method" << std::endl;
	}
}


